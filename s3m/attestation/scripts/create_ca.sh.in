#!/usr/bin/env bash
######################################################################
#
# create_ca.sh
#
# Create a Certificate Authority... or at least the files needed for
# it!
#
######################################################################

# Export everything
set -a

# Version
VERSION=__VERSION__

# Name
SCRIPT_NAME=$(basename "${0}")

# Script directory
SCRIPT_DIR=`dirname $0`
pushd ${SCRIPT_DIR} >/dev/null 2>&1
SCRIPT_DIR=$(pwd)
popd >/dev/null 2>&1

#############
# Functions #
#############

function getdv {
    if [ -f /etc/os-release ]; then
	# freedesktop.org and systemd
	. /etc/os-release
	DISTRO=$NAME
	VER=$VERSION_ID
    elif type lsb_release >/dev/null 2>&1; then
	# linuxbase.org
	DISTRO=$(lsb_release -si)
	VER=$(lsb_release -sr)
    else
	# Fall back to uname, e.g. "Linux <version>", also works for BSD, etc.
	DISTRO=$(uname -s)
	VER=$(uname -r)
    fi

    echo "$DISTRO:$VER"
}

function script_info {
    echo "--> ${SCRIPT_NAME} version is ${VERSION}"
    echo "--> running on $(getdv)"
}

############
# Defaults #
############

CA="ca"
DIRECTORY=""
FILTER=""
KEEP_TEMP="false"

######################################################################
# usage_
#
# Display usage and exit with the given code.

function usage {

    cat << EOF
${SCRIPT_NAME} [-c string] [-h] [-k] [-v]
  -c : Certificate autority name. [$CA]
  -h : Display this wonderful help screen.
  -k : Keep temporary output instead of deleting it.
  -v : Display the version.
EOF
    exit $1

}

##################################
# Parse the command line options #
##################################

while getopts "c:hkv" option ; do

    case $option in

        c)
            CA=$OPTARG
            ;;

        h)
            usage 0
            ;;

	k)
	    KEEP_TEMP="true"
	    ;;

	v)
	    script_info
	    exit 0
	    ;;

        *)
            usage 1
            ;;

    esac

done

shift $(($OPTIND - 1))

##########################################
# Capture stdout and stdin in a log file #
##########################################

exec 3<&1
exec 4<&2

# Create a log file and redirect. 
TEMP=$(mktemp -d /tmp/${SCRIPT_NAME}.XXXXXXXXXXXX)
LOG=$TEMP/log
PIPE=$TEMP/pipe

if [ "$KEEP_TEMP" = "true" ]
then
    echo "--> Saving temporary files in ${TEMP}"
else
    trap "rm -rf $TEMP" EXIT
fi

mknod $PIPE p
tee <$PIPE $LOG &
exec 1>&-
exec 1>$PIPE
exec 2>&-
exec 2>$PIPE

#######################
# Do something useful #
#######################

script_info

cat > ${NAME}.conf <<EOF

HOME            = .

####################################################################
[ ca ]
default_ca      = CA_default     # The default ca section

[ CA_default ]

default_days     = 18000         # How long to certify for
default_crl_days = 30            # How long before next CRL
default_md       = sha384        # Use public key default MD
preserve         = no            # Keep passed DN ordering

x509_extensions  = ca_extensions # The extensions to add to the cert

email_in_dn      = no            # Don't concat the email in the DN
copy_extensions  = copy          # Required to copy SANs from CSR to cert

####################################################################
[ req ]
distinguished_name = ca_distinguished_name
x509_extensions    = ca_extensions

[ ca_distinguished_name ]
countryName         = Country Name (2 letter code)
countryName_default = US

[ ca_extensions ]
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid:always, issuer
basicConstraints       = critical, CA:true
keyUsage               = keyCertSign, cRLSign

EOF

# create the authority -- certificate, key, and digest

set -x

openssl ecparam -name secp384r1 -genkey -noout -out ${CA}.key
openssl ec -in ${CA}.key -pubout -out ${CA}.pub
openssl req -new -x509 -key ${CA}.key -out ${CA}.pem \
	-days 18000 -subj /C=UK/L=Glasgow -config ${NAME}.conf
openssl x509 -in ${CA}.pem -outform DER -out ${CA}.der
openssl dgst -sha384 -binary -out ${CA}.dgst ${CA}.der

{ set +x; } 2>/dev/null

# clean up

rm -f ${NAME}.conf

#############################
# Restore stdout and stderr #
#############################

rm -f $PIPE
exec 1<&3 3<&-
exec 2<&4 4<&-

##############
# That's all #
##############

exit 0
